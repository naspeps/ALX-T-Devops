AWSTemplateFormatVersion: 2010-09-09
Description: >
  Provision the infrastructure to deploy an application on four web servers 
  in an auto-scaling group (ASG) across 2 availability zones (AZs)

Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
  EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String

  VpcCIDR:
      Description: IP range (CIDR notation) for this VPC
      Type: String
      Default: 10.1.0.0/16

  PublicSubnet1CIDR:
      Description: IP range (CIDR notation) for the public subnet in the first Availability Zone
      Type: String
      Default: 10.1.0.0/24

  PublicSubnet2CIDR:
      Description: IP range (CIDR notation) for the public subnet in the second Availability Zone
      Type: String
      Default: 10.1.1.0/24

  PrivateSubnet1CIDR:
      Description: IP range (CIDR notation) for the private subnet in the first Availability Zone
      Type: String
      Default: 10.1.2.0/24

  PrivateSubnet2CIDR:
      Description: IP range (CIDR notation) for the private subnet in the second Availability Zone
      Type: String
      Default: 10.1.3.0/24

Resources:
    VPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags: 
                - Key: Name 
                  Value: !Ref EnvironmentName
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName
            
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC
    PublicSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

# Server resources as from here
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
        GroupDescription: Allow http to our load balancer
        VpcId: !Ref VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our hosts and SSH from local only
            VpcId: !Ref VPC
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 8080
              ToPort: 8080
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 0
              ToPort: 65535
              CidrIp: 0.0.0.0/0
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    sudo apt-get update -y
                    sudo apt-get install apache2 -y
                    sudo systemctl start apache2.service
                    cd /var/www/html
                    echo "Udacity Demo Web Server Up and Running!" > index.html
            # ToDo: AMI ID of Ubuntu Linux machine. Too get one, try creating a VM from the web console. 
            ImageId: ami-0747bdcabd34c712a
            # ToDo: Change the key-pair name, as applicable to you. 
            KeyName: nd9990_keypair
            IamInstanceProfile: !Ref WebAppInstanceProfile
            SecurityGroups: !Ref WebServerSecGroup
            InstanceType: t2.micro
            BlockDeviceMappings:
            - DeviceName: "/dev/sdk"
                Ebs:
                    VolumeSize: '10'
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
            LaunchConfigurationName: !Ref: WebAppLaunchConfig
            MinSize: '3'
            MaxSize: '5'
            TargetGroupARNs: !Ref WebAppTargetGroup
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
        Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        SecurityGroups:
        - !Ref LBSecGroup
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            - Type: forward
              TargetGroupArn:
                !Ref WebAppTargetGroup
            LoadBalancerArn:
                !Ref WebAppLB
            Port: '80'
            Protocol: HTTP
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            - Type: forward
              TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 8080
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: !Ref VPC
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
    S3ReadOnlyEC2Role:
        Type: AWS::IAM::Role
        Properties:
            #RoleName: demo-ec2-instance-role
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service:
                                - ec2.amazonaws.com
                        Action:
                            - sts:AssumeRole
            Path: /
    WebAppInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - !Ref S3ReadOnlyEC2Role
    S3ReadOnlyEC2RolePolicies:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: DemoS3Policy
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                        Effect: Allow
                        Action:
                            - s3: *
                        Resource:
                            - arn:aws:s3:::demo-s3-bucket/*
                            - arn:aws:s3:::demo-s3-bucket
            Roles:
                - !Ref S3ReadOnlyEC2Role
#Outputs: 
  # This is also optional.
  # Bonus points for useful outputs!
  # for example, if you create a Load Balancer
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.
